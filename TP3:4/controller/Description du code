Ce script définit un serveur web FastAPI qui expose un certain nombre de points de terminaison HTTP pour créer, rejoindre et interagir avec des jeux.

Au début du script, plusieurs bibliothèques sont importées, notamment uvicorn, FastAPI et BaseModel de pydantic. uvicorn est un serveur web haute performance pour exécuter des applications web basées sur asyncio, et FastAPI est un cadre web moderne, rapide (haute performance) pour construire des API avec Python 3.7+ basé sur des types de données Python standard. BaseModel est une classe de pydantic qui peut être utilisée pour définir les modèles d'entrée et de sortie d'un point de terminaison API.

Ensuite, le script crée une instance de FastAPI appelée app et une instance de GameService appelée game_service. Il définit également plusieurs classes qui représentent les modèles d'entrée pour les différents points de terminaison API (CreateGameData, JoinGameData, AddVesselData et ShootAtData). Ces classes utilisent la classe BaseModel et spécifient un certain nombre de champs avec différents types de données (par exemple, player_name est une chaîne de caractères, game_id est un entier, etc.).

Après avoir défini ces classes, le script définit plusieurs points de terminaison API en utilisant les décorateurs @app.post et @app.get. Ces points de terminaison permettent aux clients de créer des jeux, de rejoindre des jeux, d'ajouter des navires aux jeux, de tirer sur des navires dans les jeux et de connaître l'état d'un jeu. Chaque point de terminaison est associé à un modèle d'entrée spécifique (par exemple, create_game est associé à CreateGameData) et à un type de retour spécifique (par exemple, get_game retourne un objet Game).

Enfin, le script définit un gestionnaire d'exceptions (exception_handler) qui sera appelé en cas d'exception lors du traitement d'une requête. Ce gestionnaire renvoie une réponse JSON avec un code de statut 500 (Erreur interne du serveur) et un message contenant l'exception qui s'est produite.

En fin de script, la fonction uvicorn.run est appelée pour démarrer le serveur web, en écoutant sur l'hôte 0.0.0.0 et sur le port 5000. Cela permet aux clients d'accéder à l'API en envoyant des requêtes HTTP à l'hôte et au port spé
